// This file is automatically generated. DO NOT EDIT.

package svg

import "encoding/xml"

{{- range $element := .Elements }}

// {{ $element.Article | default "a" | titleize }} {{ $element.GoType }} is {{ $element.Article | default "a" }} {{ $element.Name }} element.
type {{ $element.GoType }} struct {
    attrs map[string]AttrValue
{{-   if $element.Container }}
    children []Element
{{-   end }}
}

// {{ $element.GoName }} returns a new {{ $element.GoType }}.
func {{ $element.GoName }}({{ if $element.Container }} children ...Element{{ end }}) *{{ $element.GoType }} {
    return &{{ $element.GoType }}{
        attrs: map[string]AttrValue{
{{-   range $attribute := allAttributes $element }}
{{-     if $attribute.Default }}
        {{ $attribute.Name | quote }}: String({{ $attribute.Default | quote }}),
{{-     end }}
{{-   end   }}
        },
{{-   if $element.Container }}
        children: children,
{{-   end }}
    }
}
{{-   if $element.Container }}

// AppendChildren appends the given children.
func (e *{{ $element.GoType }}) AppendChildren(children ...Element) *{{ $element.GoType }} {
    e.children = append(e.children, children...)
    return e
}

// Children sets the children.
func (e *{{ $element.GoType }}) Children(children ...Element) *{{ $element.GoType }} {
    e.children = children
    return e
}
{{-   end }}
{{-   range $attribute := allAttributes $element }}
// {{ $attribute.ExportedGoName }} sets the {{ $attribute.Name }} attribute.
{{-     if eq $attribute.Type "ViewBox" }}
func (e *{{ $element.GoType }}) {{ $attribute.ExportedGoName }}(minX, minY, width, height float64) *{{ $element.GoType }} {
    e.attrs[{{ $attribute.Name | quote }}] = ViewBox{MinX: minX, MinY: minY, Width: width, Height: height}
    return e
}
{{-     else }}
func (e *{{ $element.GoType }}) {{ $attribute.ExportedGoName }}({{ $attribute.GoName }} {{ $attribute.Type }}) *{{ $element.GoType }} {
    e.attrs[{{ $attribute.Name | quote }}] = {{ $attribute.GoName }}
    return e
}
{{-     end }}
{{-   end }}
{{-   if eq $element.Name "circle" "ellipse" }}

// CXCY sets the cx and cy attributes.
func (e *{{ $element.GoType }}) CXCY(cx, cy float64, lengthFunc LengthFunc) *{{ $element.GoType }} {
    e.attrs["cx"] = lengthFunc(cx)
    e.attrs["cy"] = lengthFunc(cy)
    return e
}
{{-   end }}
{{-   if eq $element.Name "circle" }}

// CXCYR sets the cx, cy, and r attributes.
func (e *{{ $element.GoType }}) CXCYR(cx, cy, r float64, lengthFunc LengthFunc) *{{ $element.GoType }} {
    e.attrs["cx"] = lengthFunc(cx)
    e.attrs["cy"] = lengthFunc(cy)
    e.attrs["r"] = lengthFunc(r)
    return e
}
{{-   end }}
{{-   if eq $element.Name "marker" }}

// RefXY sets the refX and refY attributes.
func (e *{{ $element.GoType }}) RefXY(refX, refY float64) *{{ $element.GoType }} {
    e.attrs["refX"] = Float64(refX)
    e.attrs["refY"] = Float64(refY)
    return e
}

// MarkerWidthHeight sets the markerWidth and markerHeight attributes.
func (e *{{ $element.GoType }}) MarkerWidthHeight(markerWidth, markerHeight float64) *{{ $element.GoType }} {
    e.attrs["markerWidth"] = Float64(markerWidth)
    e.attrs["markerHeight"] = Float64(markerHeight)
    return e
}
{{-   end }}
{{-   if eq $element.Name "ellipse" "rect" }}

// RXRY sets the rx and ry attributes.
func (e *{{ $element.GoType }}) RXRY(rx, ry float64, lengthFunc LengthFunc) *{{ $element.GoType }} {
    e.attrs["rx"] = lengthFunc(rx)
    e.attrs["ry"] = lengthFunc(ry)
    return e
}
{{-   end }}
{{-   if eq $element.Name "foreignObject" "image" "rect" "svg" "symbol" "use" }}

// WidthHeight sets the width and height attributes.
func (e *{{ $element.GoType }}) WidthHeight(width, height float64, lengthFunc LengthFunc) *{{ $element.GoType }} {
    e.attrs["width"] = lengthFunc(width)
    e.attrs["height"] = lengthFunc(height)
    return e
}
{{-   end }}
{{-   if eq $element.Name "foreignObject" "image" "rect" "svg" "symbol" "text" "use" }}

// XY sets the x and y attributes.
func (e *{{ $element.GoType }}) XY(x, y float64, lengthFunc LengthFunc) *{{ $element.GoType }} {
    e.attrs["x"] = lengthFunc(x)
    e.attrs["y"] = lengthFunc(y)
    return e
}
{{-   else if eq $element.Name "line" }}

// X1Y1X2Y2 sets the x1, y1, x2, and y2 attributes.
func (e *{{ $element.GoType }}) X1Y1X2Y2(x1, y1, x2, y2 float64) *{{ $element.GoType }} {
    e.attrs["x1"] = Float64(x1)
    e.attrs["y1"] = Float64(y1)
    e.attrs["x2"] = Float64(x2)
    e.attrs["y2"] = Float64(y2)
    return e
}
{{-   else if eq $element.Name "tspan" }}

// XY sets the x and y attributes.
func (e *{{ $element.GoType }}) XY(x, y float64) *{{ $element.GoType }} {
    e.attrs["x"] = Float64(x)
    e.attrs["y"] = Float64(y)
    return e
}
{{-   end }}
{{-   if eq $element.Name "foreignObject" "image" "rect" "svg" "symbol" "use" }}

// XYWidthHeight sets the x, y, width, and height attributes.
func (e *{{ $element.GoType }}) XYWidthHeight(x, y, width, height float64, lengthFunc LengthFunc) *{{ $element.GoType }} {
    e.attrs["x"] = lengthFunc(x)
    e.attrs["y"] = lengthFunc(y)
    e.attrs["width"] = lengthFunc(width)
    e.attrs["height"] = lengthFunc(height)
    return e
}
{{-   end }}

// MarshallXML implements encoding/xml.Marshaller.MarshalXML.
func (e *{{ $element.GoType }}) MarshalXML(encoder *xml.Encoder, _ xml.StartElement) error {
    return encodeElement(encoder, "{{ $element.Name }}", e.attrs, {{ if $element.Container }}e.children{{ else }}nil{{ end }})
}
{{- end }}